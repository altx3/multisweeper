{
  "version": "2.0.0",
  "type": "shell",
  "presentation": {
    "echo": true,
    "reveal": "always",
    "focus": false,
    "panel": "dedicated",
    "showReuseMessage": true,
    "clear": true
  },
  "options": {
    "shell": {
      "executable": "C:\\Program Files\\Git\\bin\\bash.exe",
      "args": ["-c"]
    }
  },
  "tasks": [
    // Clobber our build directory to prepare for re-setup
    {
      "label": "meson: remove",
      "command": "rm -fr build/",
      "group": "build",
      "options": { "cwd": "${workspaceFolder}/server/" }
    },

    //  Build and run server
    {
      "label": "meson: setup",
      "command": [
        "if [ ! -d build ]; then",
        "meson setup build/",
        "--cross-file ./.toolchains/mingw.cross.txt",
        "-Dbuildtype=debug",
        "-Dlibuv:warning_level=0",
        "-Dlibuv:build_tests=false",
        "-DuSockets:warning_level=0",
        "-DuWebSockets:warning_level=0",
        "-DuWebSockets:c_args=-Wno-attributes",
        "-DuSockets:libuv=true;",
        "else echo 'build/ already exists'; fi"
      ],
      "options": { "cwd": "${workspaceFolder}/server/" }
    },

    {
      "label": "meson: build",
      "dependsOn": "meson: setup",
      "command": "meson compile -C build multisweeper-server",
      "group": "build",
      "options": { "cwd": "${workspaceFolder}/server/" }
    },

    {
      "label": "Copy dll's",
      "dependsOn": "meson: build",
      "command": "find build/subprojects -type f -iname '*.dll' -exec cp -f {} build/ \\;",
      "group": "build",
      "options": { "cwd": "${workspaceFolder}/server/" }
    },

    {
      "label": "Run server",
      "dependsOrder": "sequence",
      "dependsOn": ["meson: build", "Copy dll's"],
      "command": "./build/multisweeper-server",
      "group": "build",
      "options": { "cwd": "${workspaceFolder}/server/" }
    },

    // Format and lint
    {
      "label": "Format Server (clang-format)",
      "command": "find ./src ./include -name '*.cpp' -o -name '*.h' -o -name '*.hpp' | xargs clang-format --dry-run --Werror",
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "options": { "cwd": "${workspaceFolder}/server/" },
      "detail": "Formats the active C++ file using the C/C++ extension formatter."
    },
    {
      "label": "Lint Server (clang-tidy)",
      "dependsOrder": "sequence",
      "dependsOn": ["meson: remove", "meson: build"],
      "type": "shell",
      "command": "find src include -type f \\( -name '*.cpp' -o -name '*.hpp' \\) -print0 | xargs -0 -P$(nproc) -I{} clang-tidy -p build {} -- -Iinclude",
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "problemMatcher": [
        {
          "owner": "cpp",
          "fileLocation": ["relative", "${workspaceFolder}/server/"],
          "pattern": {
            "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "severity": 4,
            "message": 5
          }
        }
      ],
      "options": { "cwd": "${workspaceFolder}/server/" },
      "detail": "Runs clang-tidy on all C++ files in the workspace in parallel."
    },
    {
      "label": "Lint Server:fix (clang-tidy)",
      "dependsOrder": "sequence",
      "dependsOn": ["meson: remove", "meson: build"],
      "type": "shell",
      "command": "find src include -type f \\( -name '*.cpp' -o -name '*.hpp' \\) -print0 | xargs -0 -I{} clang-tidy -fix -p ./build {} -- -Iinclude",
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "problemMatcher": [
        {
          "owner": "cpp",
          "fileLocation": ["relative", "${workspaceFolder}/server/"],
          "pattern": {
            "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "severity": 4,
            "message": 5
          }
        }
      ],
      "options": { "cwd": "${workspaceFolder}/server/" },
      "detail": "Runs clang-tidy on all C++ files in the workspace."
    },

    // I'll actually make client task later... maybe
    {
      "label": "Show client commands",
      "command": "echo Make sure to be in the client folder! && echo npm run [dev, build, preview, lint, lint:fix, format, format:check] "
    }
  ]
}
