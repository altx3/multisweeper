name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check-pr-title:
    name: Check pull request title
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Get latest PR title via GitHub API
        id: prtitle
        run: |
          pr_url="${{ github.event.pull_request.url }}"
          pr_title=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                           -H "Accept: application/vnd.github+json" \
                           "$pr_url" | jq -r .title)
          echo "PR Title: $pr_title"
          echo "pr_title=$pr_title" >> "$GITHUB_OUTPUT"

      - name: Validate PR title
        run: |
          PR_TITLE="${{ steps.prtitle.outputs.pr_title }}"
          echo "Validating PR title: $PR_TITLE"
          if [[ ! "$PR_TITLE" =~ ^#[0-9]+ ]]; then
            echo "‚ùå Error: PR title must start with an issue number (e.g., '#123 Fix bug'). Current title: '$PR_TITLE'"
            exit 1
          else
            echo "‚úÖ PR title is valid: $PR_TITLE"
          fi

  backend-build-lint-format:
    name: Backend Build, lint and Format
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up LLVM 20.1.3 using the setup-cpp action
      - name: Setup LLVM
        uses: aminya/setup-cpp@v1
        with:
          llvm: "20.1.3"

      # Verify that the correct LLVM version is installed (optional)
      - name: Verify LLVM version
        run: |
          clang-tidy --version
          clang-format --version

      # Install additional dependencies required for the build
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build python3-pip zlib1g-dev libuv1-dev
          pip3 install meson

      # Configure the project with Meson
      - name: Configure Meson
        run: |
          cd server
          meson setup build -DuSockets:libuv=true

      # Build the backend
      - name: Build backend
        run: |
          cd server
          meson compile -C build

      # Foramt C++ code using clang-format from LLVM 20.1.3
      - name: Check C++ formatting
        run: |
          cd server
          find src include -name '*.cpp' -o -name '*.h' | xargs clang-format -n --Werror --style=file
        env:
          CLANG_FORMAT_STYLE: file

      # Lint C++ code using clang-tidy from LLVM 20.1.3
      - name: Lint C++
        run: |
          cd server
          clang-tidy --version
          find src include -type f \( -name '*.cpp' -o -name '*.hpp' \) -print0 | xargs -0 -P$(nproc) -I{} clang-tidy -p build {} -- -Iinclude

  frontend-build-and-format:
    name: Frontend Build and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: client/package.json

      - name: Install dependencies
        run: |
          cd client
          npm ci

      - name: Build frontend
        run: |
          cd client
          npm run build

      - name: Check formatting
        run: |
          cd client
          npm run format:check

# Generated by grok 3 lol ü•∂
